<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shim</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.ListExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Collections.Generic.List`1"/> class. <see cref="T:System.Collections.Generic.List`1"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> wrapper for the current collection.</summary><returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:System.IO.BinaryReaderExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.BinaryReader"/> class. <see cref="T:System.IO.BinaryReader"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.BinaryReaderExtensions.Close(System.IO.BinaryReader)">
            <summary>Closes the current reader and the underlying stream.</summary><filterpriority>2</filterpriority>
            <param name="reader">Binary reader to be closed.</param>
        </member>
        <member name="T:System.IO.BinaryWriterExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.BinaryWriter"/> class. <see cref="T:System.IO.BinaryWriter"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.BinaryWriterExtensions.Close(System.IO.BinaryWriter)">
            <summary>Closes the current <see cref="T:System.IO.BinaryWriter"/> and the underlying stream.</summary><filterpriority>1</filterpriority>
            <param name="writer">Binary writer to be closed.</param>
        </member>
        <member name="T:System.IO.ShimPath">
            <summary>
            Shim complement for the <see cref="T:System.IO.Path"/> class, providing members that are
            not included in the PCL member subset of the <see cref="T:System.IO.Path"/> class.
            </summary>
        </member>
        <member name="F:System.IO.ShimPath.PathSeparator">
            <summary>A platform-specific separator character used to separate path strings in environment variables.</summary><filterpriority>1</filterpriority>
        </member>
        <member name="F:System.IO.ShimPath.DirectorySeparatorChar">
            <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.IO.ShimPath.GetTempPath">
            <summary>Returns the path of the current user's temporary folder.</summary><returns>The path to the temporary folder, ending with a backslash.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:System.IO.ShimPath.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary><returns>The full path of the temporary file.</returns><exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
      </PermissionSet>
        </member>
        <member name="M:System.IO.ShimPath.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary><returns>The fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns><param name="path">The file or directory for which to obtain absolute path information. </param><exception cref="T:System.ArgumentException">
        <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.-or- The system could not retrieve the absolute path. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="path"/> is null. </exception><exception cref="T:System.NotSupportedException">
        <paramref name="path"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\"). </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
      </PermissionSet>
        </member>
        <member name="M:System.IO.ShimPath.Combine(System.String[])">
            <summary>Combines an array of strings into a path.</summary><returns>The combined paths.</returns><param name="paths">An array of parts of the path.</param><exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. </exception><exception cref="T:System.ArgumentNullException">One of the strings in the array is null. </exception>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.Stream"/> class. <see cref="T:System.IO.Stream"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.StreamExtensions.Close(System.IO.Stream)">
            <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.</summary><filterpriority>1</filterpriority>
            <param name="stream">Stream to be closed.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.BeginWrite(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Begins an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)</summary><returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns><param name="buffer">The buffer to write data from. </param><param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing. </param><param name="count">The maximum number of bytes to write. </param><param name="callback">An optional asynchronous callback, to be called when the write is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous write past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the write operation. </exception><filterpriority>2</filterpriority>
            <param name="stream">Stream on which to begin writing.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.EndWrite(System.IO.Stream,System.IAsyncResult)">
            <summary>Ends an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)</summary><param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending write operation is not available.-or-The pending operation does not support writing.</exception><exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
            <param name="stream">Stream on which to end writing.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.BeginRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Begins an asynchronous read operation. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)</summary><returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns><param name="buffer">The buffer to read the data into. </param><param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param><param name="count">The maximum number of bytes to read. </param><param name="callback">An optional asynchronous callback, to be called when the read is complete. </param><param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param><exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception><exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception><filterpriority>2</filterpriority>
            <param name="stream">Stream on which to begin reading.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.EndRead(System.IO.Stream,System.IAsyncResult)">
            <summary>Waits for the pending asynchronous read to complete. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"/> instead; see the Remarks section.)</summary><returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns><param name="asyncResult">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult"/> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending read operation is not available.-or-The pending operation does not support reading.</exception><exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
            <param name="stream">Stream on which to end reading.</param>
        </member>
        <member name="T:System.IO.TextReaderExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.TextReader"/> class. <see cref="T:System.IO.TextReader"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.TextReaderExtensions.Close(System.IO.TextReader)">
            <summary>Closes the <see cref="T:System.IO.TextReader"/> and releases any system resources associated with the TextReader.</summary><filterpriority>1</filterpriority>
            <param name="reader">Text reader to be closed.</param>
        </member>
        <member name="T:System.IO.TextWriterExtensions">
            <summary>
            Shim complement for the <see cref="T:System.IO.TextWriter"/> class. <see cref="T:System.IO.TextWriter"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.IO.TextWriterExtensions.Close(System.IO.TextWriter)">
            <summary>Closes the current writer and releases any system resources associated with the writer.</summary><filterpriority>1</filterpriority>
            <param name="writer">Text writer to be closed.</param>
        </member>
        <member name="T:System.Net.HttpWebRequestExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Net.HttpWebRequest"/> class. <see cref="T:System.Net.HttpWebRequest"/> instance properties that are not available in the 
            PCL profile are here provided as equivalent extension methods (since extension properties is not available in C#).
            </summary>
        </member>
        <member name="M:System.Net.HttpWebRequestExtensions.SetUserAgent(System.Net.HttpWebRequest,System.String)">
            <summary>Gets or sets the value of the User-agent HTTP header.</summary><returns>The value of the User-agent HTTP header. The default value is null.NoteThe value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"/>. If WebHeaderCollection is set, the property value is lost.</returns>
            <param name="request">HTTP web request object on which to set user agent.</param>
            <param name="userAgent">User agent value to set.</param>
        </member>
        <member name="T:System.Net.WebRequestExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Net.WebRequest"/> class. <see cref="T:System.Net.WebRequest"/> instance properties and methods that are not available in the 
            PCL profile are here provided as equivalent extension methods (since extension properties is not available in C#).
            </summary>
        </member>
        <member name="M:System.Net.WebRequestExtensions.GetResponse(System.Net.WebRequest)">
            <summary>When overridden in a descendant class, returns a response to an Internet request.</summary><returns>A <see cref="T:System.Net.WebResponse"/> containing the response to the Internet request.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="request">HTTP web request object on which to get response.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.GetRequestStream(System.Net.WebRequest)">
            <summary>When overridden in a descendant class, returns a <see cref="T:System.IO.Stream"/> for writing data to the Internet resource.</summary><returns>A <see cref="T:System.IO.Stream"/> for writing data to the Internet resource.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="request">HTTP web request object on which to get request stream.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.SetConnectionGroupName(System.Net.WebRequest,System.String)">
            <summary>When overridden in a descendant class, gets or sets the name of the connection group for the request.</summary><returns>The name of the connection group for the request.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="request">HTTP web request object on which to set connection group name.</param>
            <param name="groupName">Connection group name value to set.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.SetProxy(System.Net.WebRequest,System.Net.IWebProxy)">
            <summary>When overridden in a descendant class, gets or sets the network proxy to use to access this Internet resource.</summary><returns>The <see cref="T:System.Net.IWebProxy"/> to use to access the Internet resource.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="request">HTTP web request object on which to set proxy.</param>
            <param name="proxy">Web proxy value to set.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.SetTimeout(System.Net.WebRequest,System.Int32)">
            <summary>Gets or sets the length of time, in milliseconds, before the request times out.</summary><returns>The length of time, in milliseconds, until the request times out, or the value <see cref="F:System.Threading.Timeout.Infinite"/> to indicate that the request does not time out. The default value is defined by the descendant class.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="request">HTTP web request object on which to set timeout.</param>
            <param name="timeout">Timeout value to set.</param>
        </member>
        <member name="M:System.Net.WebRequestExtensions.SetContentLength(System.Net.WebRequest,System.Int64)">
            <summary>When overridden in a descendant class, gets or sets the content length of the request data being sent.</summary><returns>The number of bytes of request data being sent.</returns><exception cref="T:System.NotImplementedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="request">HTTP web request object on which to set content length.</param>
            <param name="contentLength">Content length value to set.</param>
        </member>
        <member name="T:System.Net.WebResponseExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Net.WebResponse"/> class. <see cref="T:System.Net.WebResponse"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Net.WebResponseExtensions.Close(System.Net.WebResponse)">
            <summary>When overridden by a descendant class, closes the response stream.</summary><exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception><PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
      </PermissionSet>
            <param name="webResponse">HTTP web response object to close.</param>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Reflection.Assembly"/> class. <see cref="T:System.Reflection.Assembly"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.CreateInstance(System.Reflection.Assembly,System.String)">
            <summary>Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</summary><returns>An instance of the specified type created with the default constructor; or null if <paramref name="typeName"/> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags"/> set to Public or Instance. </returns><param name="typeName">The <see cref="P:System.Type.FullName"/> of the type to locate. </param><exception cref="T:System.ArgumentException">
        <paramref name="typeName"/> is an empty string ("") or a string beginning with a null character.-or-The current assembly was loaded into the reflection-only context.</exception><exception cref="T:System.ArgumentNullException">
        <paramref name="typeName"/> is null. </exception><exception cref="T:System.MissingMethodException">No matching constructor was found. </exception><exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException">
        <paramref name="typeName"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception><PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess"/>
      </PermissionSet>
            <param name="assembly">Assembly on which the <paramref name="typeName"/> instance should be created.</param>
        </member>
        <member name="T:System.Reflection.ShimAssembly">
            <summary>
            Shim complement for the <see cref="T:System.Reflection.Assembly"/> class, providing static members that are
            not included in the PCL member subset of the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:System.Reflection.ShimAssembly.GetExecutingAssembly">
            <summary>Gets the assembly that contains the code that is currently executing.</summary><returns>The assembly that contains the code that is currently executing. </returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Shim complement for the <see cref="T:System.Type"/> class. <see cref="T:System.Type"/> instance methods that are not available in the 
            PCL profile are here provided as equivalent extension methods. <see cref="T:System.Type"/> instance properties that are not available
            in the PCL profile are here provided as extension methods without additional arguments (since extension properties are not supported in C#).
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsEnum(System.Type)">
            <summary>Gets a value indicating whether the current <see cref="T:System.Type"/> represents an enumeration.</summary><returns>true if the current <see cref="T:System.Type"/> represents an enumeration; otherwise, false.</returns><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.TypeExtensions.IsValueType(System.Type)">
            <summary>Gets a value indicating whether the <see cref="T:System.Type"/> is a value type.</summary><returns>true if the <see cref="T:System.Type"/> is a value type; otherwise, false.</returns><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>Determines whether an instance of the current <see cref="T:System.Type"/> can be assigned from an instance of the specified Type.</summary><returns>true if <paramref name="c"/> and the current Type represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c"/>, or if the current Type is an interface that <paramref name="c"/> implements, or if <paramref name="c"/> is a generic type parameter and the current Type represents one of the constraints of <paramref name="c"/>. false if none of these conditions are true, or if <paramref name="c"/> is null.</returns><param name="c">The type to compare with the current type. </param><filterpriority>2</filterpriority>
            <param name="type"><see cref="T:System.Type"/> object.</param>
        </member>
        <member name="M:System.TypeExtensions.IsSubclassOf(System.Type,System.Type)">
            <summary>Determines whether the class represented by the current <see cref="T:System.Type"/> derives from the class represented by the specified <see cref="T:System.Type"/>.</summary><returns>true if the Type represented by the <paramref name="c"/> parameter and the current Type represent classes, and the class represented by the current Type derives from the class represented by <paramref name="c"/>; otherwise, false. This method also returns false if <paramref name="c"/> and the current Type represent the same class.</returns><param name="c">The type to compare with the current type. </param><exception cref="T:System.ArgumentNullException">The <paramref name="c"/> parameter is null. </exception><filterpriority>2</filterpriority>
            <param name="type"><see cref="T:System.Type"/> object.</param>
        </member>
        <member name="M:System.TypeExtensions.IsInstanceOfType(System.Type,System.Object)">
            <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type"/>.</summary><returns>true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o"/>, or if the current Type is an interface that <paramref name="o"/> supports. false if neither of these conditions is the case, or if <paramref name="o"/> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters"/> returns true).</returns><param name="o">The object to compare with the current type. </param><filterpriority>2</filterpriority>
            <param name="type"><see cref="T:System.Type"/> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>Searches for the specified method, using the specified binding constraints.</summary><returns>An object representing the method that matches the specified requirements, if found; otherwise, null.</returns><param name="name">The string containing the name of the method to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception><exception cref="T:System.ArgumentNullException">
        <paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
            <param name="type"><see cref="T:System.Type"/> object.</param>
        </member>
        <member name="M:System.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)">
            <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type"/>, using the specified binding constraints.</summary><returns>An array of <see cref="T:System.Reflection.FieldInfo"/> objects representing all fields defined for the current <see cref="T:System.Type"/> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo"/>, if no fields are defined for the current <see cref="T:System.Type"/>, or if none of the defined fields match the binding constraints.</returns><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><filterpriority>2</filterpriority>
            <param name="type"><see cref="T:System.Type"/> object.</param>
        </member>
        <member name="M:System.TypeExtensions.InvokeMember(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
            <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</summary><returns>An object representing the return value of the invoked member.</returns><param name="name">The string containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param><param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder"/>. Note that explicitly defining a <see cref="T:System.Reflection.Binder"/> object may be required for successfully invoking method overloads with variable arguments.</param><param name="target">The object on which to invoke the specified member. </param><param name="args">An array containing the arguments to pass to the member to invoke. </param><param name="culture">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String"/> to a <see cref="T:System.Double"/>.-or- A null reference (Nothing in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo"/>. </param><exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr"/> does not contain CreateInstance and <paramref name="name"/> is null. </exception><exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr"/> is not a valid <see cref="T:System.Reflection.BindingFlags"/> attribute. -or- <paramref name="invokeAttr"/> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr"/> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr"/> contains both GetField and SetField.-or- <paramref name="invokeAttr"/> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr"/> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr"/> contains SetField and <paramref name="args"/> has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception><exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception><exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception><exception cref="T:System.MissingMethodException">No method can be found that matches the arguments in <paramref name="args"/>.-or- The current <see cref="T:System.Type"/> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters"/> returns true. </exception><exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target"/>. </exception><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception><exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name"/> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters"/> property returns true.</exception><filterpriority>2</filterpriority>
            <param name="type"><see cref="T:System.Type"/> object.</param>
        </member>
        <member name="T:System.ShimEnvironment">
            <summary>
            Shim complement for the <see cref="T:System.Environment"/> class, providing members that are
            not included in the PCL member subset of the <see cref="T:System.Environment"/> class.
            </summary>
        </member>
        <member name="P:System.ShimEnvironment.MachineName">
            <summary>Gets the NetBIOS name of this local computer.</summary><returns>A string containing the name of this computer.</returns><exception cref="T:System.InvalidOperationException">The name of this computer cannot be obtained.</exception><filterpriority>1</filterpriority><PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="COMPUTERNAME"/>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
      </PermissionSet>
        </member>
    </members>
</doc>
